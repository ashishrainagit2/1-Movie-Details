{"version":3,"sources":["components/Movieinfo/Movieinfo.module.css","containers/Tvshowlist/Tvshowlist.module.css","components/ModalContent/EventModalContent.module.css","components/ModalContent/EventModalContent.js","containers/Tvshowlist/Tvshowlist.js"],"names":["module","exports","Movieinfo","ImageWrapper","DetailsWrapper","Info1","ReleaseDate","AvgVote","Movielist","Personal","MovielistWrapper","ModalContent","ModalInfo","ModalTitle","infoLine","LoadMore","MoreInfo","movieModalContent","props","react_default","a","createElement","className","classes","ModalImage","src","poster_path","alt","title","vote_count","vote_average","popularity","adult","release_date","overview","react_router_dom","to","pathname","id","exact","Tvshowlist","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","e","lastElement","document","querySelector","lastElementOffset","offsetTop","clientHeight","window","pageYOffset","innerHeight","counter","pageNumber","onInitTvShowList","_this","addEventListener","scrollHandler","_this2","removeEventListener","nextProps","nextState","_this3","modalContent","tvShows","map","value","i","activeMovie","EventModalContent","Modal","show","modalStatus","modalClose","onClickTvBox","length","EventDisplayCards","list","imagePath","moreInfo","Spinner","state","Component","connect","tvShowList","totalPages","ModalStatus","loadingState","dispatch","no","actions"],"mappings":"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","file":"static/js/4.22b96841.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Movieinfo\":\"Movieinfo_Movieinfo__6D0Xs\",\"ImageWrapper\":\"Movieinfo_ImageWrapper__2Nk7g\",\"DetailsWrapper\":\"Movieinfo_DetailsWrapper__1JzRC\",\"Info1\":\"Movieinfo_Info1__3xTzN\",\"ReleaseDate\":\"Movieinfo_ReleaseDate__1ZgT7\",\"AvgVote\":\"Movieinfo_AvgVote__7bjXj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Movielist\":\"Tvshowlist_Movielist__3W5Hk\",\"Personal\":\"Tvshowlist_Personal__1vx5B\",\"MovielistWrapper\":\"Tvshowlist_MovielistWrapper__1L-9e\",\"ModalContent\":\"Tvshowlist_ModalContent__2TVdb\",\"ModalInfo\":\"Tvshowlist_ModalInfo__2sn2N\",\"ModalTitle\":\"Tvshowlist_ModalTitle__zeqBw\",\"infoLine\":\"Tvshowlist_infoLine__q_0bh\",\"LoadMore\":\"Tvshowlist_LoadMore__oCoGK\",\"MoreInfo\":\"Tvshowlist_MoreInfo__1IQIm\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ModalContent\":\"EventModalContent_ModalContent__7vA2b\",\"ModalInfo\":\"EventModalContent_ModalInfo__129Sm\",\"ModalTitle\":\"EventModalContent_ModalTitle__25xSd\",\"infoLine\":\"EventModalContent_infoLine__3981S\",\"MoreInfo\":\"EventModalContent_MoreInfo__pZNJu\"};","import React from 'react';\nimport classes from './EventModalContent.module.css';\nimport {NavLink} from 'react-router-dom';\n\nconst movieModalContent = (props) => (\n        <div className={classes.ModalContent}>\n                <div className={classes.ModalImage}>\n                        <img src={ \"https://image.tmdb.org/t/p/w400\" + props.poster_path} alt={props.title}/>\n                </div>\n                <div className={classes.ModalInfo}>\n                        <div className={classes.infoLine}>\n                                <span className={classes.ModalTitle}>Title: </span> \n                                <span>{props.title}</span>\n                        </div>\n                        <div className={classes.infoLine}>\n                                <span className={classes.ModalTitle}>Vote Count:</span> \n                                <span>{props.vote_count}</span>\n                        </div>\n                        <div className={classes.infoLine}>\n                                <span className={classes.ModalTitle}>Average Rating:</span> \n                                <span>{props.vote_average}</span>\n                        </div>\n                        <div className={classes.infoLine}>\n                                <span className={classes.ModalTitle}>Popularity:</span> \n                                <span>{props.popularity}</span>\n                        </div>\n                        <div className={classes.infoLine}>\n                                <span>{props.adult}</span>\n                        </div>\n                        <div className={classes.infoLine}>\n                                <span className={classes.ModalTitle}>Release Date: </span> \n                                <span>{props.release_date}</span>\n                        </div>\n                        <div className={classes.infoLine}>\n                                <span className={classes.ModalTitle}>Overview:</span> \n                                <div>{props.overview}</div>\n                        </div>\n                        <div className={classes.MoreInfo}>\n\n                        <NavLink to={{\n                             pathname : '/tvshow/' + props.id\n                             }} exact > More Info</NavLink>\n                        </div>\n                </div>\n         </div>\n)\n\nexport default movieModalContent;","import React , { Component} from 'react';\r\nimport * as actions from '../../store/actions/index';\r\nimport { connect } from 'react-redux';\r\nimport Movieinfo from '../../components/Movieinfo/Movieinfo';\r\nimport classes from './Tvshowlist.module.css';\r\nimport Modal from '../../components/UIcomponents/Modal/Modal';\r\nimport EventDisplayCards from '../../components/DisplayCards/EventDisplayCards/EventDisplayCards';\r\nimport Spinner from '../../components/UIcomponents/Spinner/Spinner';\r\nimport EventModalContent from '../../components/ModalContent/EventModalContent';\r\n\r\nclass Tvshowlist extends Component {\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n\r\n    static getDerivedStateFromProps(props , state){\r\n        return state;\r\n    }\r\n\r\n    scrollHandler(e){\r\n            const lastElement = document.querySelector('header + div > div > div:last-child');\r\n            if(lastElement != null){\r\n                const lastElementOffset = lastElement.offsetTop + lastElement.clientHeight;\r\n                const pageOffset = window.pageYOffset + window.innerHeight;\r\n                const bottonOffset = 30;\r\n                if((pageOffset > lastElementOffset - bottonOffset)){\r\n                    counter++;\r\n                    if(this.props.pageNumber === counter){\r\n                        this.props.onInitTvShowList(this.props.pageNumber);\r\n                    }else {\r\n                        counter--;\r\n                    }\r\n                }\r\n            }\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.props.onInitTvShowList(this.props.pageNumber);  \r\n        window.addEventListener('scroll', (e) => this.scrollHandler())\r\n    }\r\n\r\n    componentWillUnmount(){\r\n        window.removeEventListener('scroll',(e) => this.scrollHandler())\r\n    }\r\n\r\n\r\n    shouldComponentUpdate(nextProps, nextState) {\r\n        return true;\r\n    }\r\n    \r\n    componentDidUpdate() {\r\n    }\r\n\r\n    render (){\r\n        let modalContent = null;\r\n        if(this.props.tvShows != null){\r\n            modalContent = (this.props.tvShows).map((value, i) => {\r\n                if(this.props.activeMovie === value.id){\r\n                    return (\r\n                       <EventModalContent \r\n                       poster_path = {value.poster_path}\r\n                       title = {value.title}\r\n                       vote_count = {value.vote_count}\r\n                       vote_average = {value.vote_average}\r\n                       popularity = {value.popularity}\r\n                       adult = {value.adult}\r\n                       release_date = {value.release_date}\r\n                       overview = {value.overview}\r\n                       id={value.id}\r\n                       />\r\n                    )\r\n                }\r\n                \r\n            })\r\n        }\r\n        return (\r\n            <div className={classes.Movielist}>\r\n                <div className={classes.MovielistWrapper}>\r\n                    <Modal show={this.props.modalStatus} modalClose={this.props.onClickTvBox}>\r\n                        {modalContent}\r\n                    </Modal>\r\n                    { this.props.tvShows.length ? <EventDisplayCards list={this.props.tvShows} imagePath={\"https://image.tmdb.org/t/p/w300\"} moreInfo={ this.props.onClickTvBox}/> : <Spinner />}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nlet counter = 0; \r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        pageNumber: state.tvShowList.pageNumber,\r\n        totalPages: state.tvShowList.totalPages,\r\n        tvShows: state.tvShowList.tvShows,\r\n        modalStatus : state.tvShowList.ModalStatus,\r\n        activeMovie : state.tvShowList.activeMovie,\r\n        loadingState: state.tvShowList.loadingState\r\n    }\r\n}\r\n\r\nconst mapDispatchToState = dispatch => {\r\n    return {\r\n        onInitTvShowList : (no) => dispatch(actions.initTvShowList(no)),\r\n        onClickTvBox : (id) => dispatch(actions.getMoreTvInfo(id))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToState)(Tvshowlist);"],"sourceRoot":""}